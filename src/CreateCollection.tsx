import { Button, Grid } from '@mui/material'
import {
  AptosClient,
  HexString,
  TokenClient,
  TransactionBuilder,
  TransactionBuilderABI
} from 'aptos'
import { Uint64 } from 'aptos/dist/transaction_builder/bcs/types'
import { AptosPublicKey } from './types'
import {
  AccountAddress,
  ChainId,
  EntryFunction,
  RawTransaction,
  StructTag,
  TransactionPayloadEntryFunction,
  TypeTagStruct
} from 'aptos/dist/transaction_builder/aptos_types'
import { NightlyWalletAdapter } from './nightly'
import { PendingTransaction } from 'aptos/dist/generated'
import { fenecImages, TOKEN_ABIS } from './utils/const'

const sleep = milliseconds => {
  return new Promise(resolve => setTimeout(resolve, milliseconds))
}
export const CreateCollectionButton: React.FC<{
  userPublicKey: AptosPublicKey | undefined
  NightlyAptos: NightlyWalletAdapter
}> = ({ userPublicKey, NightlyAptos }) => {
  const TESTNET_URL = 'https://fullnode.devnet.aptoslabs.com'
  const aptosClient = new AptosClient(TESTNET_URL)
  const transactionBuilderABI = new TransactionBuilderABI(
    TOKEN_ABIS.map(abi => new HexString(abi).toUint8Array())
  )

  const createCollection = async () => {
    if (!userPublicKey) return
    const collectionName =
      'Test Nightly Collection ' + (Math.floor(Math.random() * 1000) + 1).toString()
    try {
      const createCollectionPayload = transactionBuilderABI.buildTransactionPayload(
        '0x3::token::create_collection_script',
        [],
        [
          collectionName,
          'We invite you to test Nightly Wallet"',
          'https://pbs.twimg.com/media/FKWweLoXIAcoVNV.jpg',
          10000,
          [false, false, false]
        ]
      )
      const [{ sequence_number: sequnceNumber }, chainId] = await Promise.all([
        aptosClient.getAccount(userPublicKey.address()),
        aptosClient.getChainId()
      ])
      const rawTxn = new RawTransaction(
        AccountAddress.fromHex(userPublicKey.address()),
        BigInt(sequnceNumber),
        createCollectionPayload,
        BigInt(2000),
        BigInt(1),
        BigInt(Math.floor(Date.now() / 1000) + 20),
        new ChainId(chainId)
      )
      const signedTx = await NightlyAptos.signTransaction(rawTxn)
      const arrayCreateTokens: RawTransaction[] = []

      const result = await aptosClient.submitSignedBCSTransaction(signedTx)
      console.log('Create collection : ', result)
      await sleep(500)

      for (let x = 0; x < 5; x++) {
        const tokenName = 'NightlyFenec ' + x.toString()
        const createTokenPayload = transactionBuilderABI.buildTransactionPayload(
          '0x3::token::create_token_script',
          [],
          [
            collectionName,
            tokenName,
            'Amazing NFTs generated by aptos_template',
            1,
            1,
            fenecImages[x],
            userPublicKey.address(),
            10,
            1,
            [false, false, false, false, true],
            ['Test', 'Data'],
            [
              'Nightly',
              `${new Date().getDay()}/${new Date().getMonth()}/${new Date().getFullYear()}`
            ],
            ['string', 'string']
          ]
        )

        const rawTxn = new RawTransaction(
          AccountAddress.fromHex(userPublicKey.address()),
          BigInt(+sequnceNumber + +x + 1),
          createTokenPayload,
          BigInt(2000),
          BigInt(1),
          BigInt(Math.floor(Date.now() / 1000) + 20),
          new ChainId(chainId)
        )
        arrayCreateTokens.push(rawTxn)
      }

      const signedTxs = await NightlyAptos.signAllTransactions(arrayCreateTokens)
      const promise: Array<Promise<PendingTransaction>> = []
      for (const signedCreateTx of signedTxs) {
        await sleep(1000)
        promise.push(aptosClient.submitSignedBCSTransaction(signedCreateTx))
      }
      const results = await Promise.all(promise)
      console.log(results)
    } catch (error) {
      console.log(error)
    }
  }

  return (
    <Grid item>
      <Button
        variant='contained'
        style={{ margin: 10 }}
        onClick={async () => {
          await createCollection()
        }}>
        Create Collection with 5 items
      </Button>
    </Grid>
  )
}
